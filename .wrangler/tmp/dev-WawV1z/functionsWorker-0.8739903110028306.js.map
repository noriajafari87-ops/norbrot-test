{
  "version": 3,
  "sources": ["../bundle-UYG3Jl/strip-cf-connecting-ip-header.js", "../bundle-tiHsgK/strip-cf-connecting-ip-header.js", "../../../functions/api/admin/database.ts", "../../../functions/api/admin/mark-delivered.ts", "../../../functions/api/auth/status.ts", "../../../functions/api/debug-env.ts", "../../../functions/api/order.ts", "../../../functions/api/orders.ts", "../../../functions/api/products.ts", "../../../functions/api/register.ts", "../pages-IqkNlv/functionsRoutes-0.49680593671437867.mjs", "../bundle-tiHsgK/middleware-loader.entry.ts", "../bundle-tiHsgK/middleware-insertion-facade.js", "../../../../../../AppData/Local/npm-cache/_npx/0eedb5afd4158ff3/node_modules/wrangler/templates/pages-template-worker.ts", "../../../../../../AppData/Local/npm-cache/_npx/0eedb5afd4158ff3/node_modules/path-to-regexp/src/index.ts", "../../../../../../AppData/Local/npm-cache/_npx/0eedb5afd4158ff3/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../AppData/Local/npm-cache/_npx/0eedb5afd4158ff3/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../../../../AppData/Local/npm-cache/_npx/0eedb5afd4158ff3/node_modules/wrangler/templates/middleware/common.ts", "../../../../../../AppData/Local/npm-cache/_npx/0eedb5afd4158ff3/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../../../../AppData/Local/npm-cache/_npx/0eedb5afd4158ff3/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-UYG3Jl/middleware-insertion-facade.js", "../../../../../../AppData/Local/npm-cache/_npx/0eedb5afd4158ff3/node_modules/wrangler/templates/middleware/common.ts", "../bundle-UYG3Jl/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\azizo\\OneDrive\\Desktop\\norbrot-test\\.wrangler\\tmp\\dev-WawV1z",
  "sourcesContent": ["function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "type PagesFunction = (ctx: any) => Promise<Response>;\r\n\r\nfunction corsHeaders() {\r\n  return {\r\n    'access-control-allow-origin': '*',\r\n    'access-control-allow-methods': 'GET,POST,OPTIONS',\r\n    'access-control-allow-headers': 'authorization,content-type',\r\n  } as Record<string, string>;\r\n}\r\n\r\nexport const onRequestOptions: PagesFunction = async () => {\r\n  return new Response(null, { status: 204, headers: corsHeaders() });\r\n};\r\n\r\nexport const onRequestGet: PagesFunction = async ({ request, env }) => {\r\n  try {\r\n    const auth = request.headers.get('authorization') || '';\r\n    if (!auth.startsWith('Bearer ')) {\r\n      return new Response(JSON.stringify({ success: false, error: 'unauthorized' }), { status: 401, headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n    }\r\n\r\n    const { SUPABASE_URL, SUPABASE_SERVICE_ROLE } = env as any;\r\n    if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE) {\r\n      return new Response(JSON.stringify({ success: false, error: 'Missing env' }), { status: 500, headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n    }\r\n\r\n    // Fetch users and orders\r\n    const [usersRes, ordersRes] = await Promise.all([\r\n      fetch(`${SUPABASE_URL}/rest/v1/users?select=*`, { headers: { apikey: SUPABASE_SERVICE_ROLE, Authorization: `Bearer ${SUPABASE_SERVICE_ROLE}` } }),\r\n      fetch(`${SUPABASE_URL}/rest/v1/orders?select=*`, { headers: { apikey: SUPABASE_SERVICE_ROLE, Authorization: `Bearer ${SUPABASE_SERVICE_ROLE}` } }),\r\n    ]);\r\n\r\n    const users = usersRes.ok ? await usersRes.json() : [];\r\n    const orders = ordersRes.ok ? await ordersRes.json() : [];\r\n\r\n    return new Response(JSON.stringify({ success: true, totalUsers: users.length, totalOrders: orders.length, users, orders }), {\r\n      headers: { 'content-type': 'application/json', ...corsHeaders() },\r\n    });\r\n  } catch (e: any) {\r\n    return new Response(JSON.stringify({ success: false, error: String(e?.message || e) }), { status: 500, headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n  }\r\n};\r\n\r\n\r\n", "type PagesFunction = (ctx: any) => Promise<Response>;\r\n\r\nfunction corsHeaders() {\r\n  return {\r\n    'access-control-allow-origin': '*',\r\n    'access-control-allow-methods': 'GET,POST,OPTIONS',\r\n    'access-control-allow-headers': 'authorization,content-type',\r\n  } as Record<string, string>;\r\n}\r\n\r\nexport const onRequestOptions: PagesFunction = async () => {\r\n  return new Response(null, { status: 204, headers: corsHeaders() });\r\n};\r\n\r\nexport const onRequestPost: PagesFunction = async ({ request, env }) => {\r\n  try {\r\n    const { SUPABASE_URL, SUPABASE_SERVICE_ROLE } = env as any;\r\n    if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE) {\r\n      return new Response(JSON.stringify({ success: false, error: 'Missing env' }), { status: 500, headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n    }\r\n\r\n    const bodyText = await request.text();\r\n    const body = bodyText ? JSON.parse(bodyText) : {};\r\n    const orderId = Number(body?.orderId);\r\n    if (!orderId) {\r\n      return new Response(JSON.stringify({ success: false, error: 'orderId required' }), { status: 400, headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n    }\r\n\r\n    const url = `${SUPABASE_URL}/rest/v1/orders?id=eq.${orderId}`;\r\n    const res = await fetch(url, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        apikey: SUPABASE_SERVICE_ROLE,\r\n        Authorization: `Bearer ${SUPABASE_SERVICE_ROLE}`,\r\n        'content-type': 'application/json',\r\n        Prefer: 'return=representation'\r\n      },\r\n      body: JSON.stringify({ status: 'delivered' })\r\n    });\r\n    if (!res.ok) {\r\n      const errText = await res.text().catch(() => '');\r\n      return new Response(JSON.stringify({ success: false, error: `update failed: ${res.status} ${errText}` }), { status: 500, headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n    }\r\n    const updated = await res.json();\r\n    return new Response(JSON.stringify({ success: true, order: Array.isArray(updated) ? updated[0] : updated }), { headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n  } catch (e: any) {\r\n    return new Response(JSON.stringify({ success: false, error: String(e?.message || e) }), { status: 500, headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n  }\r\n};\r\n\r\n\r\n", "type PagesFunction = (ctx: any) => Promise<Response>;\r\n\r\nexport const onRequestGet: PagesFunction = async () => {\r\n  // Frontend uses localStorage token; server cannot see it. Return false.\r\n  return new Response(JSON.stringify({ authenticated: false }), {\r\n    headers: { 'content-type': 'application/json' }\r\n  });\r\n};\r\n\r\n\r\n", "type PagesFunction = (ctx: any) => Promise<Response>;\r\n\r\nexport const onRequestGet: PagesFunction = async ({ env }) => {\r\n  const data = {\r\n    hasUrl: !!(env as any)?.SUPABASE_URL,\r\n    hasAnon: !!(env as any)?.SUPABASE_ANON_KEY,\r\n    hasService: !!(env as any)?.SUPABASE_SERVICE_ROLE,\r\n  };\r\n  return Response.json(data);\r\n};\r\n\r\n\r\n", "function corsHeaders() {\r\n  return {\r\n    'access-control-allow-origin': '*',\r\n    'access-control-allow-methods': 'GET,POST,OPTIONS',\r\n    'access-control-allow-headers': 'authorization,content-type',\r\n  } as Record<string, string>;\r\n}\r\n\r\nexport const onRequestOptions = async () => new Response(null, { status: 204, headers: corsHeaders() });\r\n\r\nexport async function onRequestPost({ request, env }: any) {\r\n  try {\r\n    const { SUPABASE_URL, SUPABASE_SERVICE_ROLE } = env || {};\r\n    if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE) {\r\n      return json({ ok: false, error: 'Missing env SUPABASE_URL or SUPABASE_SERVICE_ROLE' }, 500);\r\n    }\r\n\r\n    let bodyText = await request.text();\r\n    const body = bodyText ? JSON.parse(bodyText) : {};\r\n    const { phone, productName, quantity, totalPrice, totalAmount, firstName } = body || {};\r\n\r\n    if (!phone) {\r\n      return json({ ok: false, error: 'phone is required' }, 400);\r\n    }\r\n\r\n    // Minimal insert: only phone and order details. userId is optional in DB.\r\n    const row: Record<string, any> = {\r\n      phone,\r\n      productName: productName ?? 'Barbari',\r\n      quantity: Number(quantity ?? 1),\r\n      totalPrice: Number(totalPrice ?? 0),\r\n      totalAmount: Number(totalAmount ?? totalPrice ?? 0),\r\n      firstName: firstName || 'Kunde'\r\n    };\r\n\r\n    const url = `${SUPABASE_URL}/rest/v1/orders?select=*`;\r\n    const res = await fetch(url, {\r\n      method: 'POST',\r\n      headers: {\r\n        'apikey': SUPABASE_SERVICE_ROLE,\r\n        'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE}`,\r\n        'Content-Type': 'application/json',\r\n        'Prefer': 'return=representation'\r\n      },\r\n      body: JSON.stringify(row)\r\n    });\r\n\r\n    const text = await res.text();\r\n    if (!res.ok) {\r\n      return json({ ok: false, error: text || res.statusText }, res.status || 500);\r\n    }\r\n    let data: any = null;\r\n    try { data = text ? JSON.parse(text) : null; } catch (_) { data = null; }\r\n    return json({ ok: true, data: Array.isArray(data) ? data[0] : data }, 200);\r\n  } catch (e: any) {\r\n    return json({ ok: false, error: e?.message || String(e) }, 500);\r\n  }\r\n}\r\n\r\nfunction json(obj: any, status = 200) {\r\n  return new Response(JSON.stringify(obj), {\r\n    status,\r\n    headers: { 'content-type': 'application/json', ...corsHeaders() }\r\n  });\r\n}\r\n", "type PagesFunction = (ctx: any) => Promise<Response>;\r\n\r\nexport const onRequestPost: PagesFunction = async ({ request, env }) => {\r\n  // Alias to the same logic as /api/order for backward compatibility with frontend\r\n  // Importing the module at runtime to avoid duplication\r\n  const mod = await import('./order');\r\n  return mod.onRequestPost({ request, env } as any);\r\n};\r\n\r\n\r\n", "type PagesFunction = (ctx: any) => Promise<Response>;\r\n\r\nexport const onRequestGet: PagesFunction = async ({ env }) => {\r\n  try {\r\n    const { SUPABASE_URL, SUPABASE_ANON_KEY } = env as any;\r\n    if (!SUPABASE_URL || !SUPABASE_ANON_KEY) {\r\n      return new Response(JSON.stringify({ error: \"Missing SUPABASE envs\" }), { status: 500 });\r\n    }\r\n    // Read via REST to avoid ESM import issues in local Miniflare\r\n    const url = `${SUPABASE_URL}/rest/v1/products?select=id,name,slug,priceCents,active&active=eq.true&order=id`;\r\n    const res = await fetch(url, { headers: { apikey: SUPABASE_ANON_KEY, Authorization: `Bearer ${SUPABASE_ANON_KEY}` } });\r\n    if (!res.ok) {\r\n      const errText = await res.text().catch(() => '');\r\n      return new Response(JSON.stringify({ error: `products fetch failed: ${res.status} ${errText}` }), { status: 500 });\r\n    }\r\n    const rows = await res.json();\r\n    const data = Array.isArray(rows)\r\n      ? rows.map((p: any) => ({ ...p, price_cents: p.priceCents }))\r\n      : [];\r\n\r\n    return new Response(JSON.stringify({ products: data ?? [] }), {\r\n      headers: { 'content-type': 'application/json', 'access-control-allow-origin': '*' }\r\n    });\r\n  } catch (e: any) {\r\n    return new Response(JSON.stringify({ error: String(e?.message || e) }), { status: 500, headers: { 'access-control-allow-origin': '*' } });\r\n  }\r\n};\r\n\r\n\r\n", "type PagesFunction = (ctx: any) => Promise<Response>;\r\n\r\nfunction corsHeaders() {\r\n  return {\r\n    'access-control-allow-origin': '*',\r\n    'access-control-allow-methods': 'GET,POST,OPTIONS',\r\n    'access-control-allow-headers': 'authorization,content-type',\r\n  } as Record<string, string>;\r\n}\r\n\r\nexport const onRequestOptions: PagesFunction = async () => {\r\n  return new Response(null, { status: 204, headers: corsHeaders() });\r\n};\r\n\r\nexport const onRequestPost: PagesFunction = async ({ request, env }) => {\r\n  try {\r\n    const { SUPABASE_URL, SUPABASE_SERVICE_ROLE } = env as any;\r\n    if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE) {\r\n      return new Response(JSON.stringify({ error: 'Missing env SUPABASE_URL or SUPABASE_SERVICE_ROLE' }), {\r\n        status: 500,\r\n        headers: { 'content-type': 'application/json', ...corsHeaders() }\r\n      });\r\n    }\r\n\r\n    const bodyText = await request.text();\r\n    const body = bodyText ? JSON.parse(bodyText) : {};\r\n    const firstName = (body?.firstName || '').toString();\r\n    const phone = (body?.phone || '').toString();\r\n    const lastName = (body?.lastName || '').toString();\r\n    const street = (body?.street || '').toString();\r\n    const houseNumber = (body?.houseNumber || '').toString();\r\n    const apartment = (body?.apartment || '').toString();\r\n    const postalCode = (body?.postalCode || '').toString();\r\n    const city = (body?.city || '').toString();\r\n    const state = (body?.state || '').toString();\r\n\r\n    // Only firstName and phone are mandatory\r\n    if (!firstName || !phone) {\r\n      return new Response(JSON.stringify({ error: 'firstName and phone are required' }), {\r\n        status: 400, headers: { 'content-type': 'application/json', ...corsHeaders() }\r\n      });\r\n    }\r\n\r\n    // Check if user exists by phone via Supabase REST\r\n    // Use a minimal select to avoid unknown column errors on differing schemas\r\n    const selectUrl = `${SUPABASE_URL}/rest/v1/users?phone=eq.${encodeURIComponent(phone)}&select=id,phone`;\r\n    const selectRes = await fetch(selectUrl, {\r\n      headers: {\r\n        apikey: SUPABASE_SERVICE_ROLE,\r\n        Authorization: `Bearer ${SUPABASE_SERVICE_ROLE}`,\r\n        'content-type': 'application/json'\r\n      }\r\n    });\r\n    if (!selectRes.ok) {\r\n      const errText = await selectRes.text().catch(() => '');\r\n      return new Response(JSON.stringify({ error: `users select failed: ${selectRes.status} ${errText}` }), { status: 500, headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n    }\r\n    const selectRaw = await selectRes.text();\r\n    const existingArr = selectRaw ? JSON.parse(selectRaw) : [];\r\n    if (Array.isArray(existingArr) && existingArr.length > 0) {\r\n      return new Response(JSON.stringify({ error: 'User already exists with this phone number' }), {\r\n        status: 400, headers: { 'content-type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Create user via REST\r\n    const insertUrl = `${SUPABASE_URL}/rest/v1/users?select=*`;\r\n    const insertRes = await fetch(insertUrl, {\r\n      method: 'POST',\r\n      headers: {\r\n        apikey: SUPABASE_SERVICE_ROLE,\r\n        Authorization: `Bearer ${SUPABASE_SERVICE_ROLE}`,\r\n        'content-type': 'application/json',\r\n        Prefer: 'return=representation'\r\n      },\r\n      body: JSON.stringify({\r\n        firstName, lastName, phone,\r\n        street, houseNumber, apartment, postalCode, city, state,\r\n        country: 'Deutschland'\r\n      })\r\n    });\r\n    let created = null as any;\r\n    if (!insertRes.ok) {\r\n      const errText = await insertRes.text().catch(() => '');\r\n      // Fallback to snake_case columns if camelCase failed\r\n      const insertResSnake = await fetch(insertUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          apikey: SUPABASE_SERVICE_ROLE,\r\n          Authorization: `Bearer ${SUPABASE_SERVICE_ROLE}`,\r\n          'content-type': 'application/json',\r\n          Prefer: 'return=representation'\r\n        },\r\n        body: JSON.stringify({\r\n          firstName, lastName, phone,\r\n          street, houseNumber, apartment, postalCode, city, state,\r\n          country: 'Deutschland'\r\n        })\r\n      });\r\n      if (!insertResSnake.ok) {\r\n        const errText2 = await insertResSnake.text().catch(() => '');\r\n        return new Response(JSON.stringify({ error: `users insert failed: ${insertRes.status} ${errText} | snake_case: ${insertResSnake.status} ${errText2}` }), { status: 500, headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n      }\r\n      const rawSnake = await insertResSnake.text();\r\n      const createdArrSnake = rawSnake ? JSON.parse(rawSnake) : [];\r\n      created = Array.isArray(createdArrSnake) ? createdArrSnake[0] : createdArrSnake;\r\n    } else {\r\n      const raw = await insertRes.text();\r\n      const createdArr = raw ? JSON.parse(raw) : [];\r\n      created = Array.isArray(createdArr) ? createdArr[0] : createdArr;\r\n    }\r\n\r\n    // Generate simple permanent token (base64 JSON like old app)\r\n    // Fallback: if created is empty, re-fetch by phone to get id\r\n    if (!created || !created.id) {\r\n      const refetchUrl = `${SUPABASE_URL}/rest/v1/users?phone=eq.${encodeURIComponent(phone)}&select=id,phone&limit=1`;\r\n      const refetchRes = await fetch(refetchUrl, { headers: { apikey: SUPABASE_SERVICE_ROLE, Authorization: `Bearer ${SUPABASE_SERVICE_ROLE}` } });\r\n      const refetchRaw = await refetchRes.text();\r\n      const refetchArr = refetchRaw ? JSON.parse(refetchRaw) : [];\r\n      created = Array.isArray(refetchArr) ? refetchArr[0] : refetchArr;\r\n    }\r\n\r\n    const tokenPayload = JSON.stringify({ userId: created?.id, timestamp: Date.now() });\r\n    // Cloudflare Workers: use btoa for base64\r\n    const token = btoa(tokenPayload);\r\n\r\n    return new Response(JSON.stringify({\r\n      success: true,\r\n      message: 'User registered successfully',\r\n      token,\r\n      user: created,\r\n    }), { headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n  } catch (e: any) {\r\n    return new Response(JSON.stringify({ error: String(e?.message || e) }), { status: 500, headers: { 'content-type': 'application/json', ...corsHeaders() } });\r\n  }\r\n};\r\n\r\n\r\n", "import { onRequestGet as __api_admin_database_ts_onRequestGet } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\admin\\\\database.ts\"\nimport { onRequestOptions as __api_admin_database_ts_onRequestOptions } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\admin\\\\database.ts\"\nimport { onRequestOptions as __api_admin_mark_delivered_ts_onRequestOptions } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\admin\\\\mark-delivered.ts\"\nimport { onRequestPost as __api_admin_mark_delivered_ts_onRequestPost } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\admin\\\\mark-delivered.ts\"\nimport { onRequestGet as __api_auth_status_ts_onRequestGet } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\auth\\\\status.ts\"\nimport { onRequestGet as __api_debug_env_ts_onRequestGet } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\debug-env.ts\"\nimport { onRequestOptions as __api_order_ts_onRequestOptions } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\order.ts\"\nimport { onRequestPost as __api_order_ts_onRequestPost } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\order.ts\"\nimport { onRequestPost as __api_orders_ts_onRequestPost } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\orders.ts\"\nimport { onRequestGet as __api_products_ts_onRequestGet } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\products.ts\"\nimport { onRequestOptions as __api_register_ts_onRequestOptions } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\register.ts\"\nimport { onRequestPost as __api_register_ts_onRequestPost } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\functions\\\\api\\\\register.ts\"\n\nexport const routes = [\n    {\n      routePath: \"/api/admin/database\",\n      mountPath: \"/api/admin\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_admin_database_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/admin/database\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_database_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/mark-delivered\",\n      mountPath: \"/api/admin\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_admin_mark_delivered_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/admin/mark-delivered\",\n      mountPath: \"/api/admin\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_admin_mark_delivered_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/auth/status\",\n      mountPath: \"/api/auth\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_auth_status_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/debug-env\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_debug_env_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/order\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_order_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/order\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_order_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/orders\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_orders_ts_onRequestPost],\n    },\n  {\n      routePath: \"/api/products\",\n      mountPath: \"/api\",\n      method: \"GET\",\n      middlewares: [],\n      modules: [__api_products_ts_onRequestGet],\n    },\n  {\n      routePath: \"/api/register\",\n      mountPath: \"/api\",\n      method: \"OPTIONS\",\n      middlewares: [],\n      modules: [__api_register_ts_onRequestOptions],\n    },\n  {\n      routePath: \"/api/register\",\n      mountPath: \"/api\",\n      method: \"POST\",\n      middlewares: [],\n      modules: [__api_register_ts_onRequestPost],\n    },\n  ]", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\.wrangler\\\\tmp\\\\bundle-tiHsgK\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\azizo\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\0eedb5afd4158ff3\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\.wrangler\\\\tmp\\\\bundle-tiHsgK\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\.wrangler\\\\tmp\\\\bundle-tiHsgK\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\azizo\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\0eedb5afd4158ff3\\\\node_modules\\\\wrangler\\\\templates\\\\pages-template-worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\azizo\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\0eedb5afd4158ff3\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\azizo\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\0eedb5afd4158ff3\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\azizo\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\0eedb5afd4158ff3\\\\node_modules\\\\wrangler\\\\templates\\\\pages-template-worker.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "import { match } from \"path-to-regexp\";\n\n//note: this explicitly does not include the * character, as pages requires this\nconst escapeRegex = /[.+?^${}()|[\\]\\\\]/g;\n\ntype HTTPMethod =\n\t| \"HEAD\"\n\t| \"OPTIONS\"\n\t| \"GET\"\n\t| \"POST\"\n\t| \"PUT\"\n\t| \"PATCH\"\n\t| \"DELETE\";\n\n/* TODO: Grab these from @cloudflare/workers-types instead */\ntype Params<P extends string = string> = Record<P, string | string[]>;\n\ntype EventContext<Env, P extends string, Data> = {\n\trequest: Request;\n\tfunctionPath: string;\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n\tnext: (input?: Request | string, init?: RequestInit) => Promise<Response>;\n\tenv: Env & { ASSETS: { fetch: typeof fetch } };\n\tparams: Params<P>;\n\tdata: Data;\n};\n\ndeclare type PagesFunction<\n\tEnv = unknown,\n\tP extends string = string,\n\tData extends Record<string, unknown> = Record<string, unknown>,\n> = (context: EventContext<Env, P, Data>) => Response | Promise<Response>;\n/* end @cloudflare/workers-types */\n\ntype RouteHandler = {\n\troutePath: string;\n\tmountPath: string;\n\tmethod?: HTTPMethod;\n\tmodules: PagesFunction[];\n\tmiddlewares: PagesFunction[];\n};\n\n// inject `routes` via ESBuild\ndeclare const routes: RouteHandler[];\n// define `__FALLBACK_SERVICE__` via ESBuild\ndeclare const __FALLBACK_SERVICE__: string;\n\n// expect an ASSETS fetcher binding pointing to the asset-server stage\ntype FetchEnv = {\n\t[name: string]: { fetch: typeof fetch };\n\tASSETS: { fetch: typeof fetch };\n};\n\ntype WorkerContext = {\n\twaitUntil: (promise: Promise<unknown>) => void;\n\tpassThroughOnException: () => void;\n};\n\nfunction* executeRequest(request: Request) {\n\tconst requestPath = new URL(request.url).pathname;\n\n\t// First, iterate through the routes (backwards) and execute \"middlewares\" on partial route matches\n\tfor (const route of [...routes].reverse()) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// replaces with \"\\\\$&\", this prepends a backslash to the matched string, e.g. \"[\" becomes \"\\[\"\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult) {\n\t\t\tfor (const handler of route.middlewares.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: mountMatchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t}\n\n\t// Then look for the first exact route match and execute its \"modules\"\n\tfor (const route of routes) {\n\t\tif (route.method && route.method !== request.method) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst routeMatcher = match(route.routePath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: true,\n\t\t});\n\t\tconst mountMatcher = match(route.mountPath.replace(escapeRegex, \"\\\\$&\"), {\n\t\t\tend: false,\n\t\t});\n\t\tconst matchResult = routeMatcher(requestPath);\n\t\tconst mountMatchResult = mountMatcher(requestPath);\n\t\tif (matchResult && mountMatchResult && route.modules.length) {\n\t\t\tfor (const handler of route.modules.flat()) {\n\t\t\t\tyield {\n\t\t\t\t\thandler,\n\t\t\t\t\tparams: matchResult.params as Params,\n\t\t\t\t\tpath: matchResult.path,\n\t\t\t\t};\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nexport default {\n\tasync fetch(\n\t\toriginalRequest: Request,\n\t\tenv: FetchEnv,\n\t\tworkerContext: WorkerContext\n\t) {\n\t\tlet request = originalRequest;\n\t\tconst handlerIterator = executeRequest(request);\n\t\tlet data = {}; // arbitrary data the user can set between functions\n\t\tlet isFailOpen = false;\n\n\t\tconst next = async (input?: RequestInfo, init?: RequestInit) => {\n\t\t\tif (input !== undefined) {\n\t\t\t\tlet url = input;\n\t\t\t\tif (typeof input === \"string\") {\n\t\t\t\t\turl = new URL(input, request.url).toString();\n\t\t\t\t}\n\t\t\t\trequest = new Request(url, init);\n\t\t\t}\n\n\t\t\tconst result = handlerIterator.next();\n\t\t\t// Note we can't use `!result.done` because this doesn't narrow to the correct type\n\t\t\tif (result.done === false) {\n\t\t\t\tconst { handler, params, path } = result.value;\n\t\t\t\tconst context = {\n\t\t\t\t\trequest: new Request(request.clone()),\n\t\t\t\t\tfunctionPath: path,\n\t\t\t\t\tnext,\n\t\t\t\t\tparams,\n\t\t\t\t\tget data() {\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t},\n\t\t\t\t\tset data(value) {\n\t\t\t\t\t\tif (typeof value !== \"object\" || value === null) {\n\t\t\t\t\t\t\tthrow new Error(\"context.data must be an object\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// user has overriden context.data, so we need to merge it with the existing data\n\t\t\t\t\t\tdata = value;\n\t\t\t\t\t},\n\t\t\t\t\tenv,\n\t\t\t\t\twaitUntil: workerContext.waitUntil.bind(workerContext),\n\t\t\t\t\tpassThroughOnException: () => {\n\t\t\t\t\t\tisFailOpen = true;\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tconst response = await handler(context);\n\n\t\t\t\tif (!(response instanceof Response)) {\n\t\t\t\t\tthrow new Error(\"Your Pages function should return a Response\");\n\t\t\t\t}\n\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else if (__FALLBACK_SERVICE__) {\n\t\t\t\t// There are no more handlers so finish with the fallback service (`env.ASSETS.fetch` in Pages' case)\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t} else {\n\t\t\t\t// There was not fallback service so actually make the request to the origin.\n\t\t\t\tconst response = await fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\t\t};\n\n\t\ttry {\n\t\t\treturn await next();\n\t\t} catch (error) {\n\t\t\tif (isFailOpen) {\n\t\t\t\tconst response = await env[__FALLBACK_SERVICE__].fetch(request);\n\t\t\t\treturn cloneResponse(response);\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t}\n\t},\n};\n\n// This makes a Response mutable\nconst cloneResponse = (response: Response) =>\n\t// https://fetch.spec.whatwg.org/#null-body-status\n\tnew Response(\n\t\t[101, 204, 205, 304].includes(response.status) ? null : response.body,\n\t\tresponse\n\t);\n", "/**\n * Tokenizer results.\n */\ninterface LexToken {\n  type:\n    | \"OPEN\"\n    | \"CLOSE\"\n    | \"PATTERN\"\n    | \"NAME\"\n    | \"CHAR\"\n    | \"ESCAPED_CHAR\"\n    | \"MODIFIER\"\n    | \"END\";\n  index: number;\n  value: string;\n}\n\n/**\n * Tokenize input string.\n */\nfunction lexer(str: string): LexToken[] {\n  const tokens: LexToken[] = [];\n  let i = 0;\n\n  while (i < str.length) {\n    const char = str[i];\n\n    if (char === \"*\" || char === \"+\" || char === \"?\") {\n      tokens.push({ type: \"MODIFIER\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"\\\\\") {\n      tokens.push({ type: \"ESCAPED_CHAR\", index: i++, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"{\") {\n      tokens.push({ type: \"OPEN\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \"}\") {\n      tokens.push({ type: \"CLOSE\", index: i, value: str[i++] });\n      continue;\n    }\n\n    if (char === \":\") {\n      let name = \"\";\n      let j = i + 1;\n\n      while (j < str.length) {\n        const code = str.charCodeAt(j);\n\n        if (\n          // `0-9`\n          (code >= 48 && code <= 57) ||\n          // `A-Z`\n          (code >= 65 && code <= 90) ||\n          // `a-z`\n          (code >= 97 && code <= 122) ||\n          // `_`\n          code === 95\n        ) {\n          name += str[j++];\n          continue;\n        }\n\n        break;\n      }\n\n      if (!name) throw new TypeError(`Missing parameter name at ${i}`);\n\n      tokens.push({ type: \"NAME\", index: i, value: name });\n      i = j;\n      continue;\n    }\n\n    if (char === \"(\") {\n      let count = 1;\n      let pattern = \"\";\n      let j = i + 1;\n\n      if (str[j] === \"?\") {\n        throw new TypeError(`Pattern cannot start with \"?\" at ${j}`);\n      }\n\n      while (j < str.length) {\n        if (str[j] === \"\\\\\") {\n          pattern += str[j++] + str[j++];\n          continue;\n        }\n\n        if (str[j] === \")\") {\n          count--;\n          if (count === 0) {\n            j++;\n            break;\n          }\n        } else if (str[j] === \"(\") {\n          count++;\n          if (str[j + 1] !== \"?\") {\n            throw new TypeError(`Capturing groups are not allowed at ${j}`);\n          }\n        }\n\n        pattern += str[j++];\n      }\n\n      if (count) throw new TypeError(`Unbalanced pattern at ${i}`);\n      if (!pattern) throw new TypeError(`Missing pattern at ${i}`);\n\n      tokens.push({ type: \"PATTERN\", index: i, value: pattern });\n      i = j;\n      continue;\n    }\n\n    tokens.push({ type: \"CHAR\", index: i, value: str[i++] });\n  }\n\n  tokens.push({ type: \"END\", index: i, value: \"\" });\n\n  return tokens;\n}\n\nexport interface ParseOptions {\n  /**\n   * Set the default delimiter for repeat parameters. (default: `'/'`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters to automatically consider prefixes when parsing.\n   */\n  prefixes?: string;\n}\n\n/**\n * Parse a string for the raw tokens.\n */\nexport function parse(str: string, options: ParseOptions = {}): Token[] {\n  const tokens = lexer(str);\n  const { prefixes = \"./\", delimiter = \"/#?\" } = options;\n  const result: Token[] = [];\n  let key = 0;\n  let i = 0;\n  let path = \"\";\n\n  const tryConsume = (type: LexToken[\"type\"]): string | undefined => {\n    if (i < tokens.length && tokens[i].type === type) return tokens[i++].value;\n  };\n\n  const mustConsume = (type: LexToken[\"type\"]): string => {\n    const value = tryConsume(type);\n    if (value !== undefined) return value;\n    const { type: nextType, index } = tokens[i];\n    throw new TypeError(`Unexpected ${nextType} at ${index}, expected ${type}`);\n  };\n\n  const consumeText = (): string => {\n    let result = \"\";\n    let value: string | undefined;\n    while ((value = tryConsume(\"CHAR\") || tryConsume(\"ESCAPED_CHAR\"))) {\n      result += value;\n    }\n    return result;\n  };\n\n  const isSafe = (value: string): boolean => {\n    for (const char of delimiter) if (value.indexOf(char) > -1) return true;\n    return false;\n  };\n\n  const safePattern = (prefix: string) => {\n    const prev = result[result.length - 1];\n    const prevText = prefix || (prev && typeof prev === \"string\" ? prev : \"\");\n\n    if (prev && !prevText) {\n      throw new TypeError(\n        `Must have text between two parameters, missing text after \"${(prev as Key).name}\"`,\n      );\n    }\n\n    if (!prevText || isSafe(prevText)) return `[^${escapeString(delimiter)}]+?`;\n    return `(?:(?!${escapeString(prevText)})[^${escapeString(delimiter)}])+?`;\n  };\n\n  while (i < tokens.length) {\n    const char = tryConsume(\"CHAR\");\n    const name = tryConsume(\"NAME\");\n    const pattern = tryConsume(\"PATTERN\");\n\n    if (name || pattern) {\n      let prefix = char || \"\";\n\n      if (prefixes.indexOf(prefix) === -1) {\n        path += prefix;\n        prefix = \"\";\n      }\n\n      if (path) {\n        result.push(path);\n        path = \"\";\n      }\n\n      result.push({\n        name: name || key++,\n        prefix,\n        suffix: \"\",\n        pattern: pattern || safePattern(prefix),\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    const value = char || tryConsume(\"ESCAPED_CHAR\");\n    if (value) {\n      path += value;\n      continue;\n    }\n\n    if (path) {\n      result.push(path);\n      path = \"\";\n    }\n\n    const open = tryConsume(\"OPEN\");\n    if (open) {\n      const prefix = consumeText();\n      const name = tryConsume(\"NAME\") || \"\";\n      const pattern = tryConsume(\"PATTERN\") || \"\";\n      const suffix = consumeText();\n\n      mustConsume(\"CLOSE\");\n\n      result.push({\n        name: name || (pattern ? key++ : \"\"),\n        pattern: name && !pattern ? safePattern(prefix) : pattern,\n        prefix,\n        suffix,\n        modifier: tryConsume(\"MODIFIER\") || \"\",\n      });\n      continue;\n    }\n\n    mustConsume(\"END\");\n  }\n\n  return result;\n}\n\nexport interface TokensToFunctionOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * Function for encoding input strings for output.\n   */\n  encode?: (value: string, token: Key) => string;\n  /**\n   * When `false` the function can produce an invalid (unmatched) path. (default: `true`)\n   */\n  validate?: boolean;\n}\n\n/**\n * Compile a string to a template function for the path.\n */\nexport function compile<P extends object = object>(\n  str: string,\n  options?: ParseOptions & TokensToFunctionOptions,\n) {\n  return tokensToFunction<P>(parse(str, options), options);\n}\n\nexport type PathFunction<P extends object = object> = (data?: P) => string;\n\n/**\n * Expose a method for transforming tokens into the path function.\n */\nexport function tokensToFunction<P extends object = object>(\n  tokens: Token[],\n  options: TokensToFunctionOptions = {},\n): PathFunction<P> {\n  const reFlags = flags(options);\n  const { encode = (x: string) => x, validate = true } = options;\n\n  // Compile all the tokens into regexps.\n  const matches = tokens.map((token) => {\n    if (typeof token === \"object\") {\n      return new RegExp(`^(?:${token.pattern})$`, reFlags);\n    }\n  });\n\n  return (data: Record<string, any> | null | undefined) => {\n    let path = \"\";\n\n    for (let i = 0; i < tokens.length; i++) {\n      const token = tokens[i];\n\n      if (typeof token === \"string\") {\n        path += token;\n        continue;\n      }\n\n      const value = data ? data[token.name] : undefined;\n      const optional = token.modifier === \"?\" || token.modifier === \"*\";\n      const repeat = token.modifier === \"*\" || token.modifier === \"+\";\n\n      if (Array.isArray(value)) {\n        if (!repeat) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to not repeat, but got an array`,\n          );\n        }\n\n        if (value.length === 0) {\n          if (optional) continue;\n\n          throw new TypeError(`Expected \"${token.name}\" to not be empty`);\n        }\n\n        for (let j = 0; j < value.length; j++) {\n          const segment = encode(value[j], token);\n\n          if (validate && !(matches[i] as RegExp).test(segment)) {\n            throw new TypeError(\n              `Expected all \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n            );\n          }\n\n          path += token.prefix + segment + token.suffix;\n        }\n\n        continue;\n      }\n\n      if (typeof value === \"string\" || typeof value === \"number\") {\n        const segment = encode(String(value), token);\n\n        if (validate && !(matches[i] as RegExp).test(segment)) {\n          throw new TypeError(\n            `Expected \"${token.name}\" to match \"${token.pattern}\", but got \"${segment}\"`,\n          );\n        }\n\n        path += token.prefix + segment + token.suffix;\n        continue;\n      }\n\n      if (optional) continue;\n\n      const typeOfMessage = repeat ? \"an array\" : \"a string\";\n      throw new TypeError(`Expected \"${token.name}\" to be ${typeOfMessage}`);\n    }\n\n    return path;\n  };\n}\n\nexport interface RegexpToFunctionOptions {\n  /**\n   * Function for decoding strings for params.\n   */\n  decode?: (value: string, token: Key) => string;\n}\n\n/**\n * A match result contains data about the path match.\n */\nexport interface MatchResult<P extends object = object> {\n  path: string;\n  index: number;\n  params: P;\n}\n\n/**\n * A match is either `false` (no match) or a match result.\n */\nexport type Match<P extends object = object> = false | MatchResult<P>;\n\n/**\n * The match function takes a string and returns whether it matched the path.\n */\nexport type MatchFunction<P extends object = object> = (\n  path: string,\n) => Match<P>;\n\n/**\n * Create path match function from `path-to-regexp` spec.\n */\nexport function match<P extends object = object>(\n  str: Path,\n  options?: ParseOptions & TokensToRegexpOptions & RegexpToFunctionOptions,\n) {\n  const keys: Key[] = [];\n  const re = pathToRegexp(str, keys, options);\n  return regexpToFunction<P>(re, keys, options);\n}\n\n/**\n * Create a path match function from `path-to-regexp` output.\n */\nexport function regexpToFunction<P extends object = object>(\n  re: RegExp,\n  keys: Key[],\n  options: RegexpToFunctionOptions = {},\n): MatchFunction<P> {\n  const { decode = (x: string) => x } = options;\n\n  return function (pathname: string) {\n    const m = re.exec(pathname);\n    if (!m) return false;\n\n    const { 0: path, index } = m;\n    const params = Object.create(null);\n\n    for (let i = 1; i < m.length; i++) {\n      if (m[i] === undefined) continue;\n\n      const key = keys[i - 1];\n\n      if (key.modifier === \"*\" || key.modifier === \"+\") {\n        params[key.name] = m[i].split(key.prefix + key.suffix).map((value) => {\n          return decode(value, key);\n        });\n      } else {\n        params[key.name] = decode(m[i], key);\n      }\n    }\n\n    return { path, index, params };\n  };\n}\n\n/**\n * Escape a regular expression string.\n */\nfunction escapeString(str: string) {\n  return str.replace(/([.+*?=^!:${}()[\\]|/\\\\])/g, \"\\\\$1\");\n}\n\n/**\n * Get the flags for a regexp from the options.\n */\nfunction flags(options?: { sensitive?: boolean }) {\n  return options && options.sensitive ? \"\" : \"i\";\n}\n\n/**\n * Metadata about a key.\n */\nexport interface Key {\n  name: string | number;\n  prefix: string;\n  suffix: string;\n  pattern: string;\n  modifier: string;\n}\n\n/**\n * A token is a string (nothing special) or key metadata (capture group).\n */\nexport type Token = string | Key;\n\n/**\n * Pull out keys from a regexp.\n */\nfunction regexpToRegexp(path: RegExp, keys?: Key[]): RegExp {\n  if (!keys) return path;\n\n  const groupsRegex = /\\((?:\\?<(.*?)>)?(?!\\?)/g;\n\n  let index = 0;\n  let execResult = groupsRegex.exec(path.source);\n  while (execResult) {\n    keys.push({\n      // Use parenthesized substring match if available, index otherwise\n      name: execResult[1] || index++,\n      prefix: \"\",\n      suffix: \"\",\n      modifier: \"\",\n      pattern: \"\",\n    });\n    execResult = groupsRegex.exec(path.source);\n  }\n\n  return path;\n}\n\n/**\n * Transform an array into a regexp.\n */\nfunction arrayToRegexp(\n  paths: Array<string | RegExp>,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n): RegExp {\n  const parts = paths.map((path) => pathToRegexp(path, keys, options).source);\n  return new RegExp(`(?:${parts.join(\"|\")})`, flags(options));\n}\n\n/**\n * Create a path regexp from string input.\n */\nfunction stringToRegexp(\n  path: string,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  return tokensToRegexp(parse(path, options), keys, options);\n}\n\nexport interface TokensToRegexpOptions {\n  /**\n   * When `true` the regexp will be case sensitive. (default: `false`)\n   */\n  sensitive?: boolean;\n  /**\n   * When `true` the regexp won't allow an optional trailing delimiter to match. (default: `false`)\n   */\n  strict?: boolean;\n  /**\n   * When `true` the regexp will match to the end of the string. (default: `true`)\n   */\n  end?: boolean;\n  /**\n   * When `true` the regexp will match from the beginning of the string. (default: `true`)\n   */\n  start?: boolean;\n  /**\n   * Sets the final character for non-ending optimistic matches. (default: `/`)\n   */\n  delimiter?: string;\n  /**\n   * List of characters that can also be \"end\" characters.\n   */\n  endsWith?: string;\n  /**\n   * Encode path tokens for use in the `RegExp`.\n   */\n  encode?: (value: string) => string;\n}\n\n/**\n * Expose a function for taking tokens and returning a RegExp.\n */\nexport function tokensToRegexp(\n  tokens: Token[],\n  keys?: Key[],\n  options: TokensToRegexpOptions = {},\n) {\n  const {\n    strict = false,\n    start = true,\n    end = true,\n    encode = (x: string) => x,\n    delimiter = \"/#?\",\n    endsWith = \"\",\n  } = options;\n  const endsWithRe = `[${escapeString(endsWith)}]|$`;\n  const delimiterRe = `[${escapeString(delimiter)}]`;\n  let route = start ? \"^\" : \"\";\n\n  // Iterate over the tokens and create our regexp string.\n  for (const token of tokens) {\n    if (typeof token === \"string\") {\n      route += escapeString(encode(token));\n    } else {\n      const prefix = escapeString(encode(token.prefix));\n      const suffix = escapeString(encode(token.suffix));\n\n      if (token.pattern) {\n        if (keys) keys.push(token);\n\n        if (prefix || suffix) {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            const mod = token.modifier === \"*\" ? \"?\" : \"\";\n            route += `(?:${prefix}((?:${token.pattern})(?:${suffix}${prefix}(?:${token.pattern}))*)${suffix})${mod}`;\n          } else {\n            route += `(?:${prefix}(${token.pattern})${suffix})${token.modifier}`;\n          }\n        } else {\n          if (token.modifier === \"+\" || token.modifier === \"*\") {\n            throw new TypeError(\n              `Can not repeat \"${token.name}\" without a prefix and suffix`,\n            );\n          }\n\n          route += `(${token.pattern})${token.modifier}`;\n        }\n      } else {\n        route += `(?:${prefix}${suffix})${token.modifier}`;\n      }\n    }\n  }\n\n  if (end) {\n    if (!strict) route += `${delimiterRe}?`;\n\n    route += !options.endsWith ? \"$\" : `(?=${endsWithRe})`;\n  } else {\n    const endToken = tokens[tokens.length - 1];\n    const isEndDelimited =\n      typeof endToken === \"string\"\n        ? delimiterRe.indexOf(endToken[endToken.length - 1]) > -1\n        : endToken === undefined;\n\n    if (!strict) {\n      route += `(?:${delimiterRe}(?=${endsWithRe}))?`;\n    }\n\n    if (!isEndDelimited) {\n      route += `(?=${delimiterRe}|${endsWithRe})`;\n    }\n  }\n\n  return new RegExp(route, flags(options));\n}\n\n/**\n * Supported `path-to-regexp` input types.\n */\nexport type Path = string | RegExp | Array<string | RegExp>;\n\n/**\n * Normalize the given path string, returning a regular expression.\n *\n * An empty array can be passed in for the keys, which will hold the\n * placeholder key descriptions. For example, using `/user/:id`, `keys` will\n * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.\n */\nexport function pathToRegexp(\n  path: Path,\n  keys?: Key[],\n  options?: TokensToRegexpOptions & ParseOptions,\n) {\n  if (path instanceof RegExp) return regexpToRegexp(path, keys);\n  if (Array.isArray(path)) return arrayToRegexp(path, keys, options);\n  return stringToRegexp(path, keys, options);\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\.wrangler\\\\tmp\\\\pages-IqkNlv\\\\functionsWorker-0.8739903110028306.mjs\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\azizo\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\0eedb5afd4158ff3\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\azizo\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\0eedb5afd4158ff3\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\.wrangler\\\\tmp\\\\pages-IqkNlv\\\\functionsWorker-0.8739903110028306.mjs\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\.wrangler\\\\tmp\\\\bundle-UYG3Jl\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\azizo\\\\AppData\\\\Local\\\\npm-cache\\\\_npx\\\\0eedb5afd4158ff3\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\.wrangler\\\\tmp\\\\bundle-UYG3Jl\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\azizo\\\\OneDrive\\\\Desktop\\\\norbrot-test\\\\.wrangler\\\\tmp\\\\bundle-UYG3Jl\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": ["stripCfConnectingIPHeader", "__name", "corsHeaders", "onRequestOptions", "onRequestGet", "onRequestPost", "value", "_a", "result", "char", "prefix", "i", "drainBody", "middleware_ensure_req_body_drained_default", "reduceError", "jsonError", "middleware_miniflare3_json_error_default", "__INTERNAL_WRANGLER_MIDDLEWARE__", "middleware_ensure_req_body_drained_default", "middleware_miniflare3_json_error_default", "middleware_insertion_facade_default", "__facade_middleware__", "__facade_register__", "__facade_invokeChain__", "__facade_invoke__", "__facade_middleware__", "__Facade_ScheduledController__", "wrapExportedHandler", "__INTERNAL_WRANGLER_MIDDLEWARE__", "__facade_register__", "__facade_invoke__", "wrapWorkerEntrypoint", "WRAPPED_ENTRY", "middleware_insertion_facade_default", "middleware_loader_entry_default"]
}
